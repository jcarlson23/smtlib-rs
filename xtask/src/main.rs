mod logics;

use std::path::{Path, PathBuf};

use color_eyre::Result;

mod flags {
    xflags::xflags! {
        // src "./xtask/src/main.rs"

        cmd xtask {
            /// Generate the spec from the SMT-LIB standard
            cmd spec {}
            cmd logics {}
        }
    }
}

fn main() -> Result<()> {
    color_eyre::install()?;

    let sh = xshell::Shell::new()?;
    sh.change_dir(project_root());

    let e = flags::Xtask::from_env_or_exit();
    match e.subcommand {
        flags::XtaskCmd::Spec(_) => {}
        flags::XtaskCmd::Logics(_) => {
            let output = add_preamble("cargo xtask logics", logics::generate(&sh)?);
            sh.write_file("./smtlib/src/logics.rs", output)?;
        }
    }

    Ok(())
}

fn add_preamble(generator: &'static str, mut text: String) -> String {
    let preamble = format!("//! Generated by `{generator}`, do not edit by hand.\n\n");
    text.insert_str(0, &preamble);
    text
}

fn project_root() -> PathBuf {
    Path::new(&env!("CARGO_MANIFEST_DIR"))
        .ancestors()
        .nth(1)
        .unwrap()
        .to_path_buf()
}
